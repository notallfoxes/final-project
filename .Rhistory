titanic_tuned_rec <- titanic_recipe %>%
step_poly(pclass, sex, age, sib_sp, parch, fare, degree = tune())  # polynomial regression
# rsample object of the cross-validation resamples
titanic_folds <- vfold_cv(titanic_train, v = 10) # Here ISLR uses v instead of k but they are interchangeable, common values include 5 or 10
titanic_folds # creates the k-Fold data set
# tibble with hyperparameter values we are exploring
degree_grid <- grid_regular(degree(range = c(1, 10)), levels = 10)
degree_grid
# We will use the recipe created in Question 2 to create workflows
# Logistic regression
log_reg <- logistic_reg() %>%
set_engine("glm") %>%
set_mode("classification")
titanic_tuned_log_wf <- workflow() %>%  # log workflow
add_model(log_reg) %>%
add_recipe(titanic_tuned_rec)
# Linear discriminant analysis
lda_mod <- discrim_linear() %>%
set_mode("classification") %>%
set_engine("MASS")
titanic_tuned_lda_wf <- workflow() %>%  # lda workflow
add_model(lda_mod) %>%
add_recipe(titanic_tuned_rec)
# Quadratic discriminant analysis
qda_mod <- discrim_quad() %>%
set_mode("classification") %>%
set_engine("MASS")
titanic_tuned_qda_wf <- workflow() %>%  # qda workflow
add_model(qda_mod) %>%
add_recipe(titanic_tuned_rec)
# Quadratic discriminant analysis
qda_mod <- discrim_quad() %>%
set_mode("classification") %>%
set_engine("MASS")
titanic_tuned_qda_wf <- workflow() %>%  # qda workflow
add_model(qda_mod) %>%
add_recipe(titanic_tuned_rec)
# Question 5
Fit each of the models created in Question 4 to the folded data.
IMPORTANT: Some models may take a while to run -- anywhere from 3 to 10 minutes. You should NOT re-run these models each time you knit. Instead, run them once, using an R script, and store your results; look into the use of loading and saving. You should still include the code to run them when you knit, but set eval = FALSE in the code chunks.
```{r eval=FALSE}
# logistic regression fit
tune_log <- tune_grid(
object = titanic_tuned_log_wf,
resamples = titanic_folds,
grid = degree_grid,
control = control_grid(verbose = TRUE))
# logistic regression fit
tune_log <- tune_grid(
object = titanic_tuned_log_wf,
resamples = titanic_folds,
grid = degree_grid,
control = control_grid(verbose = TRUE))
library(dplyr)
# logistic regression fit
tune_log <- tune_grid(
object = titanic_tuned_log_wf,
resamples = titanic_folds,
grid = degree_grid,
control = control_grid(verbose = TRUE))
knitr::opts_chunk$set(echo = TRUE)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidymodels)
library(tidymodels)
library(ISLR)
library(ISLR2)
library(tidyverse)
tidymodels_prefer()
knitr::opts_chunk$set(echo = TRUE)
library(tidymodels)
library(ISLR)
library(ISLR2)
library(dplyr)
library(tidyverse)
tidymodels_prefer()
titanic <- read_csv(file = "data/titanic.csv") %>%
mutate(survived = factor(survived,
levels = c("Yes", "No")),
pclass = factor(pclass))
titanic
set.seed(777)
titanic_split <- titanic %>%
initial_split(strata = survived, prop = 0.8)
titanic_train <- training(titanic_split)
titanic_test <- testing(titanic_split)
dim(titanic_train)
dim(titanic_test)
titanic_recipe <- recipe(survived ~ pclass + sex + age + sib_sp + parch + fare, data = titanic_train) %>%
step_impute_linear(age, impute_with = imp_vars(sib_sp)) %>%
step_dummy(all_nominal_predictors()) %>%
step_interact(~ starts_with("sex"):age + age:fare)
# Creating tuned recipe for use later in workflows
titanic_tuned_rec <- titanic_recipe %>%
step_poly(pclass, sex, age, sib_sp, parch, fare, degree = tune())  # polynomial regression
# rsample object of the cross-validation resamples
titanic_folds <- vfold_cv(titanic_train, v = 10) # Here ISLR uses v instead of k but they are interchangeable, common values include 5 or 10
titanic_folds # creates the k-Fold data set
# tibble with hyperparameter values we are exploring
degree_grid <- grid_regular(degree(range = c(1, 10)), levels = 10)
degree_grid
# We will use the recipe created in Question 2 to create workflows
# Logistic regression
log_reg <- logistic_reg() %>%
set_engine("glm") %>%
set_mode("classification")
titanic_tuned_log_wf <- workflow() %>%  # log workflow
add_model(log_reg) %>%
add_recipe(titanic_tuned_rec)
# Linear discriminant analysis
lda_mod <- discrim_linear() %>%
set_mode("classification") %>%
set_engine("MASS")
titanic_tuned_lda_wf <- workflow() %>%  # lda workflow
add_model(lda_mod) %>%
add_recipe(titanic_tuned_rec)
# Quadratic discriminant analysis
qda_mod <- discrim_quad() %>%
set_mode("classification") %>%
set_engine("MASS")
titanic_tuned_qda_wf <- workflow() %>%  # qda workflow
add_model(qda_mod) %>%
add_recipe(titanic_tuned_rec)
# logistic regression fit
tune_log <- tune_grid(
object = titanic_tuned_log_wf,
resamples = titanic_folds,
grid = degree_grid,
control = control_grid(verbose = TRUE))
# logistic regression fit
tune_log <- tune_grid(
object = titanic_tuned_log_wf,
resamples = titanic_folds,
grid = degree_grid,
control = control_grid(verbose = TRUE))
tensorflow::install_tensorflow()
install.packages('tensorflow')
tensorflow::install_tensorflow()
library(tensorflow)
knitr::opts_chunk$set(echo = TRUE)
library(tidymodels)
library(ISLR)
install.packages('tensorflow')
library(tensorflow)
library(ISLR2)
library(dplyr)
library(tidyverse)
tidymodels_prefer()
titanic <- read_csv(file = "data/titanic.csv") %>%
mutate(survived = factor(survived,
levels = c("Yes", "No")),
pclass = factor(pclass))
titanic
set.seed(777)
titanic_split <- titanic %>%
initial_split(strata = survived, prop = 0.8)
titanic_train <- training(titanic_split)
titanic_test <- testing(titanic_split)
dim(titanic_train)
dim(titanic_test)
titanic_recipe <- recipe(survived ~ pclass + sex + age + sib_sp + parch + fare, data = titanic_train) %>%
step_impute_linear(age, impute_with = imp_vars(sib_sp)) %>%
step_dummy(all_nominal_predictors()) %>%
step_interact(~ starts_with("sex"):age + age:fare)
# Creating tuned recipe for use later in workflows
titanic_tuned_rec <- titanic_recipe %>%
step_poly(pclass, sex, age, sib_sp, parch, fare, degree = tune())  # polynomial regression
# rsample object of the cross-validation resamples
titanic_folds <- vfold_cv(titanic_train, v = 10) # Here ISLR uses v instead of k but they are interchangeable, common values include 5 or 10
titanic_folds # creates the k-Fold data set
# tibble with hyperparameter values we are exploring
degree_grid <- grid_regular(degree(range = c(1, 10)), levels = 10)
degree_grid
# We will use the recipe created in Question 2 to create workflows
# Logistic regression
log_reg <- logistic_reg() %>%
set_engine("glm") %>%
set_mode("classification")
titanic_tuned_log_wf <- workflow() %>%  # log workflow
add_model(log_reg) %>%
add_recipe(titanic_tuned_rec)
# Linear discriminant analysis
lda_mod <- discrim_linear() %>%
set_mode("classification") %>%
set_engine("MASS")
titanic_tuned_lda_wf <- workflow() %>%  # lda workflow
add_model(lda_mod) %>%
add_recipe(titanic_tuned_rec)
# Quadratic discriminant analysis
qda_mod <- discrim_quad() %>%
set_mode("classification") %>%
set_engine("MASS")
titanic_tuned_qda_wf <- workflow() %>%  # qda workflow
add_model(qda_mod) %>%
add_recipe(titanic_tuned_rec)
# logistic regression fit
tune_log <- tune_grid(
object = titanic_tuned_log_wf,
resamples = titanic_folds,
grid = degree_grid,
control = control_grid(verbose = TRUE))
# tune_grid fits model within each fold for each value in degree grid
# the control option prints out progress which helps with models that take a long time to fit
# Quadratic discriminant analysis fit
tune_qda <- tune_grid(
object = titanic_tuned_qda_wf,
resamples = titanic_folds,
grid = degree_grid,
control = control_grid(verbose = TRUE))
warnings()
knitr::opts_chunk$set(echo = TRUE, message = FALSE,
warning = FALSE)
tune_log_res <- tune_grid(
object = log_tuned_wkflow,
resamples = titanic_folds,
grid = degree_grid,
control = control_grid(verbose = FALSE))
tune_lda <- tune_grid(
object = lda_tuned_wkflow,
resamples = titanic_folds,
grid = degree_grid,
control = control_grid(verbose = TRUE))
# linear discriminant analysis fit
tune_lda <- tune_grid(
object = titanic_tuned_lda_wf,
resamples = titanic_folds,
grid = degree_grid,
control = control_grid(verbose = TRUE))
# Quadratic discriminant analysis fit
tune_qda <- tune_grid(
object = titanic_tuned_qda_wf,
resamples = titanic_folds,
grid = degree_grid,
control = control_grid(verbose = TRUE))
titanic_tuned_log_wf
titanic_tuned_log_wf
# logistic regression fit
tune_log <- tune_grid(
object = titanic_tuned_log_wf,
resamples = titanic_folds,
grid = degree_grid,
control = control_grid(verbose = TRUE))
# logistic regression fit
tune_log <- tune_grid(
resamples = titanic_folds)
tune_log <- tune_grid(
resamples = titanic_folds,
control = control_grid(verbose = TRUE))
tune_log <- log_tuned_wkflow %>%
tune_grid(
resamples = titanic_folds,
control = control_grid(verbose = TRUE))
knitr::opts_chunk$set(echo = TRUE, message = FALSE,
warning = FALSE)
library(tidyverse)
library(tidymodels)
library(discrim)
library(ISLR)
library(ISLR2)
tidymodels_prefer()
set.seed(12345)
titanic <- read_csv(file = "data/titanic.csv") %>%
mutate(survived = factor(survived,
levels = c("Yes", "No")),
pclass = factor(pclass))
titanic
titanic_split <- titanic %>%
initial_split(strata = survived, prop = 0.8)
titanic_train <- training(titanic_split)
titanic_test <- testing(titanic_split)
dim(titanic_train)
dim(titanic_test)
# create recipe
titanic_recipe <- recipe(survived ~ pclass + sex + age +
sib_sp + parch + fare, data = titanic_train) %>%
step_impute_linear(age, impute_with = imp_vars(sib_sp)) %>%
step_dummy(all_nominal_predictors()) %>%
step_interact(~ starts_with("sex"):age + age:fare)
# create tuned recipe
titanic_tuned_recipe <- titanic_recipe %>%
step_poly(pclass, sex, age, sib_sp, parch, fare, degree = tune())
# k-fold cross-validation
titanic_folds <- vfold_cv(titanic_train, v = 10)
titanic_folds
log_reg <- logistic_reg() %>%
set_engine("glm") %>%
set_mode("classification")
log_tuned_wkflow <- workflow() %>%
add_model(log_reg) %>%
add_recipe(titanic_tuned_recipe)
lda_mod <- discrim_linear() %>%
set_mode("classification") %>%
set_engine("MASS")
lda_tuned_wkflow <- workflow() %>%
add_model(lda_mod) %>%
add_recipe(titanic_tuned_recipe)
qda_mod <- discrim_quad() %>%
set_mode("classification") %>%
set_engine("MASS")
qda_tuned_wkflow <- workflow() %>%
add_model(qda_mod) %>%
add_recipe(titanic_tuned_recipe)
collect_metrics(tune_log)
knitr::opts_chunk$set(echo = TRUE, message = FALSE,
warning = FALSE)
log_fit <- log_tuned_wkflow %>% fit(titanic_train)
knitr::opts_chunk$set(echo = TRUE, message = FALSE,
warning = FALSE)
library(tidyverse)
library(tidymodels)
library(discrim)
library(ISLR)
library(ISLR2)
tidymodels_prefer()
set.seed(12345)
titanic <- read_csv(file = "data/titanic.csv") %>%
mutate(survived = factor(survived,
levels = c("Yes", "No")),
pclass = factor(pclass))
titanic
titanic_split <- titanic %>%
initial_split(strata = survived, prop = 0.8)
titanic_train <- training(titanic_split)
titanic_test <- testing(titanic_split)
dim(titanic_train)
dim(titanic_test)
# create recipe
titanic_recipe <- recipe(survived ~ pclass + sex + age +
sib_sp + parch + fare, data = titanic_train) %>%
step_impute_linear(age, impute_with = imp_vars(sib_sp)) %>%
step_dummy(all_nominal_predictors()) %>%
step_interact(~ starts_with("sex"):age + age:fare)
# create tuned recipe
titanic_tuned_recipe <- titanic_recipe %>%
step_poly(pclass, sex, age, sib_sp, parch, fare, degree = tune())
# k-fold cross-validation
titanic_folds <- vfold_cv(titanic_train, v = 10)
titanic_folds
log_reg <- logistic_reg() %>%
set_engine("glm") %>%
set_mode("classification")
log_tuned_wkflow <- workflow() %>%
add_model(log_reg) %>%
add_recipe(titanic_tuned_recipe)
lda_mod <- discrim_linear() %>%
set_mode("classification") %>%
set_engine("MASS")
lda_tuned_wkflow <- workflow() %>%
add_model(lda_mod) %>%
add_recipe(titanic_tuned_recipe)
qda_mod <- discrim_quad() %>%
set_mode("classification") %>%
set_engine("MASS")
qda_tuned_wkflow <- workflow() %>%
add_model(qda_mod) %>%
add_recipe(titanic_tuned_recipe)
collect_metrics(tune_log)
library(dplyr)
knitr::opts_chunk$set(echo = TRUE, message = FALSE,
warning = FALSE)
library(tidyverse)
library(tidymodels)
library(discrim)
library(ISLR)
library(ISLR2)
library(dplyr)
tidymodels_prefer()
set.seed(12345)
titanic <- read_csv(file = "data/titanic.csv") %>%
mutate(survived = factor(survived,
levels = c("Yes", "No")),
pclass = factor(pclass))
titanic
titanic_split <- titanic %>%
initial_split(strata = survived, prop = 0.8)
titanic_train <- training(titanic_split)
titanic_test <- testing(titanic_split)
dim(titanic_train)
dim(titanic_test)
# create recipe
titanic_recipe <- recipe(survived ~ pclass + sex + age +
sib_sp + parch + fare, data = titanic_train) %>%
step_impute_linear(age, impute_with = imp_vars(sib_sp)) %>%
step_dummy(all_nominal_predictors()) %>%
step_interact(~ starts_with("sex"):age + age:fare)
# create tuned recipe
titanic_tuned_recipe <- titanic_recipe %>%
step_poly(pclass, sex, age, sib_sp, parch, fare, degree = tune())
# k-fold cross-validation
titanic_folds <- vfold_cv(titanic_train, v = 10)
titanic_folds
log_reg <- logistic_reg() %>%
set_engine("glm") %>%
set_mode("classification")
log_tuned_wkflow <- workflow() %>%
add_model(log_reg) %>%
add_recipe(titanic_tuned_recipe)
lda_mod <- discrim_linear() %>%
set_mode("classification") %>%
set_engine("MASS")
lda_tuned_wkflow <- workflow() %>%
add_model(lda_mod) %>%
add_recipe(titanic_tuned_recipe)
qda_mod <- discrim_quad() %>%
set_mode("classification") %>%
set_engine("MASS")
qda_tuned_wkflow <- workflow() %>%
add_model(qda_mod) %>%
add_recipe(titanic_tuned_recipe)
#collect_metrics(tune_log)
#collect_metrics(tune_lda)
#collect_metrics(tune_qda)
log_fit <- log_tuned_wkflow %>% fit(titanic_train)
log_fit <- fit(log_wkflow, titanic_train)
log_wkflow <- workflow() %>%
add_model(log_reg) %>%
add_recipe(t_recipe)
log_wkflow <- workflow() %>%
add_model(log_reg) %>%
add_recipe(titanic_recipe)
log_wkflow <- workflow() %>%
add_model(log_reg) %>%
add_recipe(titanic_recipe)
log_fit <- fit(log_wkflow, titanic_train)
knitr::opts_chunk$set(echo = TRUE, message = FALSE,
warning = FALSE)
library(tidyverse)
library(tidymodels)
library(discrim)
library(ISLR)
library(ISLR2)
library(dplyr)
tidymodels_prefer()
set.seed(12345)
titanic <- read_csv(file = "data/titanic.csv") %>%
mutate(survived = factor(survived,
levels = c("Yes", "No")),
pclass = factor(pclass))
titanic
titanic_split <- titanic %>%
initial_split(strata = survived, prop = 0.8)
titanic_train <- training(titanic_split)
titanic_test <- testing(titanic_split)
dim(titanic_train)
dim(titanic_test)
# create recipe
titanic_recipe <- recipe(survived ~ pclass + sex + age +
sib_sp + parch + fare, data = titanic_train) %>%
step_impute_linear(age, impute_with = imp_vars(sib_sp)) %>%
step_dummy(all_nominal_predictors()) %>%
step_interact(~ starts_with("sex"):age + age:fare)
# create tuned recipe
titanic_tuned_recipe <- titanic_recipe %>%
step_poly(pclass, sex, age, sib_sp, parch, fare, degree = tune())
# k-fold cross-validation
titanic_folds <- vfold_cv(titanic_train, v = 10)
titanic_folds
log_reg <- logistic_reg() %>%
set_engine("glm") %>%
set_mode("classification")
log_tuned_wkflow <- workflow() %>%
add_model(log_reg) %>%
add_recipe(titanic_tuned_recipe)
lda_mod <- discrim_linear() %>%
set_mode("classification") %>%
set_engine("MASS")
lda_tuned_wkflow <- workflow() %>%
add_model(lda_mod) %>%
add_recipe(titanic_tuned_recipe)
qda_mod <- discrim_quad() %>%
set_mode("classification") %>%
set_engine("MASS")
qda_tuned_wkflow <- workflow() %>%
add_model(qda_mod) %>%
add_recipe(titanic_tuned_recipe)
#collect_metrics(tune_log)
#collect_metrics(tune_lda)
#collect_metrics(tune_qda)
log_wkflow <- workflow() %>%
add_model(log_reg) %>%
add_recipe(titanic_recipe)
log_fit <- fit(log_wkflow, titanic_train)
titanic_recipe <- recipe(survived ~ pclass + sex + age +
sib_sp + parch + fare, data = titanic_train) %>%
step_impute_linear(age, impute_with = imp_vars(sib_sp)) %>%
step_dummy(all_nominal_predictors()) %>%
step_interact(~ starts_with("sex"):age + age:fare)
titanic_recipe
# create grid of values we want to explore
degree_grid <- grid_regular(degree(range = c(1, 10)), levels = 10)
degree_grid
tune_log <- log_tuned_wkflow %>%
tune_grid(
resamples = titanic_folds,
control = control_grid(verbose = TRUE))
predict(log_fit, new_data = titanic_test) %>% bind_cols(titanic_test%>% dplyr::select(survived)) %>%
accuracy(truth=survived, estimate = .pred_class)
library(tidyverse)
library(tidyverse)
install.packages(c("class", "cli", "colorspace", "digest", "dplyr", "fansi", "ipred", "lattice", "lubridate", "magrittr", "MASS", "Matrix", "nnet", "plyr", "Rcpp", "rpart", "survival", "tibble", "vctrs", "xfun"))
